<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Auth;
use DB;

class TicketQuery extends Model
{
    //ticket status
    const OPEN = 1;
    const CLOSED = 0;

    //ticket notification statuses
    const NOTIFICATION_OPEN = 'ticket_open';
    const NOTIFICATION_CLOSED = 'ticket_closed';

    /*Create Queries Start*/
    public static function createQuery($data)
    {
        $ticketQuery = new self();

        $ticketQuery->ticket_reason_id = $data['ticket_reason_id'];
        $ticketQuery->user_id = $data['user_id'];
        $ticketQuery->email_id = $data['email_id'];
        $ticketQuery->admin_id = $data['admin_id'];
        $ticketQuery->g_auth_secret = $data['g_auth_secret'];
        $ticketQuery->g_auth_timestamp = $data['g_auth_timestamp'];

        $ticketQuery->save();

        return $ticketQuery->id;
    }
    /*Create Queries End*/

    /*Find Queries Start*/
    public static function findTicketById($id)
    {
        return self::from('ticket_queries As tq')
            ->leftjoin('ticket_reasons As tr', 'tr.id', '=', 'tq.ticket_reason_id')
            ->select(
                'tq.*',
                'tr.reason'
            )
            ->where('tq.id', $id)->first();
    }

    public static function findTicketByIdSlim($id)
    {
        $ticket = self::from('ticket_queries As tq')
            ->join('ticket_reasons As tr', 'tr.id', '=', 'tq.ticket_reason_id')
            ->leftjoin('users As u', 'u.id', '=', 'tq.user_id')
            ->leftjoin('admins As adm', 'adm.id', '=', 'tq.admin_id')
            ->select(
                'tq.id As query_id',
                'tr.reason',
                'tr.for_logged_in',
                'tq.user_id As user_id',
                'u.username',
                'tq.email_id As email_id',
                'adm.username As assigned_to',
                'tq.ticket_status',
                'tq.created_at As ticket_created_at',
                'tq.updated_at As ticket_last_updated_at'
            );
        if (Auth::guard('admin')->user()->roles()->get()[0]->name != Admin::SUPER) {
            $ticket = $ticket->where('tq.admin_id', Auth::guard('admin')->user()->id);
        }
        $ticket = $ticket->where('tq.id', $id)->first();

        return $ticket;
    }
    /*Find Queries End*/

    /*Get Queries Start*/
    public static function getTicketsByUserId(
        $offset = null,
        $limit = null,
        $userId
    ) {
        $query = self::from('ticket_queries As tq')
            ->join(
                DB::raw(
                    '(select ticket_query_id, reply from ticket_replies where id in (select min(id) from ticket_replies group by ticket_query_id)) tqr'
                ),
                function ($join) {
                    $join->on('tq.id', '=', 'tqr.ticket_query_id');
                }
            )
            ->leftjoin(
                DB::raw(
                    '(select ticket_query_id, count(*) As total_unread from ticket_replies where read_at IS NULL and user_id=' . TicketReply::CS . ' group by ticket_query_id) cnt'
                ),
                function ($join) {
                    $join->on('tq.id', '=', 'cnt.ticket_query_id');
                }
            )
            ->leftjoin('ticket_reasons As tr', 'tr.id', '=', 'tq.ticket_reason_id')
            ->select(
                'tq.id As ticket_id',
                'tq.ticket_status',
                'tr.reason',
                'tqr.reply As question',
                'tq.updated_at',
                'tq.created_at',
                'cnt.total_unread'
            )->where('tq.user_id', $userId);

        if (true == $offset) {
            $query = $query->offset($offset);
        }
        if (true == $limit) {
            $query = $query->limit($limit);
        }

        $query = $query->get();

        return $query;
    }

    public static function getTickets()
    {
        $ticket = self::from('ticket_queries As tq')
            ->join('ticket_reasons As tr', 'tr.id', '=', 'tq.ticket_reason_id')
            ->leftjoin('users As u', 'u.id', '=', 'tq.user_id')
            ->leftjoin('admins As adm', 'adm.id', '=', 'tq.admin_id')
            ->leftjoin(
                DB::raw(
                    '(select ticket_query_id, count(*) As total_unread from ticket_replies where read_at IS NULL and user_id !=' . TicketReply::CS . ' group by ticket_query_id) cnt'
                ),
                function ($join) {
                    $join->on('tq.id', '=', 'cnt.ticket_query_id');
                }
            )
            ->leftjoin(
                DB::raw(
                    '(select ticket_query_id, count(*) As total_outside_unread from ticket_replies where read_at IS NULL and user_id IS NULL group by ticket_query_id) cnt_outside'
                ),
                function ($join) {
                    $join->on('tq.id', '=', 'cnt_outside.ticket_query_id');
                }
            )
            ->select(
                'tq.id As query_id',
                'tr.reason',
                'tr.for_logged_in',
                'tq.user_id As user_id',
                'u.username',
                'tq.email_id As email_id',
                'adm.username As assigned_to',
                'tq.ticket_status',
                'tq.created_at As ticket_created_at',
                'tq.updated_at As ticket_last_updated_at',
                'cnt.total_unread',
                'cnt_outside.total_outside_unread'
            );
        if (Auth::guard('admin')->user()->roles()->get()[0]->name != Admin::SUPER) {
            $ticket = $ticket->where('tq.admin_id', Auth::guard('admin')->user()->id);
        }
        $ticket = $ticket->orderBy('ticket_created_at', 'desc')->get();

        return $ticket;
    }
    /*Get Queries End*/
}

