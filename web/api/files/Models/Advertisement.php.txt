<?php

namespace App\Models;

use App\Http\Controllers\Home\AdvertisementController;
use App\Models\Model;
use Carbon\Carbon;

class Advertisement extends Model
{
    //trade_type
    const BUY = 1;
    const SELL = 2;

    //is_reported is 1 or 0

    //status
    const DELETED = 0;
    const ACTIVE = 1;
    const INACTIVE = 2;

    const HIDDEN = 4;

    //API response after ad creation or updation
    const AD_CREATED_MSG = 'Advertisment created successfully';
    const AD_UPDATED_MSG = 'Advertisment updated successfully';

    //AD reported status
    const REPORTED = 1;

    //ad ticket created
    const TICKET_CREATED = 1;
    
    /*Relations Start*/
    /**
     * Each Advertisement belongs to a currency
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function currency()
    {
        return $this->belongsTo('App\Models\Currency');
    }

    /**
     * Each Advertisement belongs to a Coin
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function coin()
    {
        return $this->belongsTo('App\Models\Coin');
    }

    /**
     * An advertisement has many time slots
     * @see \app\Models\AdvertisementTimeSlot
     * @return mixed
     */
    public function time_slots()
    {
        return $this->hasMany('App\Models\AdvertisementTimeSlot')->active();
    }

    /**
     * An advertisement has many payment methods
     * @see \app\Models\AdvertisementPaymentMethod
     * @return mixed
     */
    public function payment_methods()
    {
        return $this->hasMany('App\Models\AdvertisementPaymentMethod')->active();
    }
    /*Relations End*/

    /*Create Queries Start*/
    public static function createAdvertisement($data)
    {
        $advertisement = new self;

        $advertisement->user_id = $data['user_id'];
        $advertisement->coin_id = $data['coin_id'];
        $advertisement->currency_id = $data['currency_id'];
        $advertisement->country_id = $data['country_id'];
        $advertisement->trade_type = $data['trade_type'];
        $advertisement->time_slot_count = $data['time_slot_count'];
        $advertisement->margin_percentage = $data['margin_percentage'];
        $advertisement->payment_window_minutes = $data['payment_window_minutes'];
        $advertisement->terms = $data['terms'];
        $advertisement->min_limit = $data['min_limit'];
        $advertisement->max_limit = $data['max_limit'];
        $advertisement->is_reported = $data['is_reported'];
        $advertisement->status = $data['status'];
        $advertisement->save();

        return $advertisement->id;
    }
    /*Create Queries End*/

    /*Find Queries Start*/
    public static function findWithCurrency($advertisementId)
    {
        return self::select(
            'advertisements.id',
            'advertisements.coin_id',
            'advertisements.user_id',
            'advertisements.trade_type',
            'margin_percentage',
            'currencies.rate as currency_rate',
            'currencies.symbol as currency_symbol',
            'coins.price as coin_price',
            'coins.symbol as coin_symbol'
        )
            ->join('coins', 'advertisements.coin_id', '=', 'coins.id')
            ->join('currencies', 'advertisements.currency_id', '=', 'currencies.id')
            ->where('advertisements.id', $advertisementId)
            ->first();
    }

    /**
     * Finds and ACTIVE advertisement by id.
     *
     * @param int $advertisementId
     * @return mixed
     */
    public static function findAdvertisement($advertisementId)
    {
        return self::select('advertisements.*', 'coins.name as coin_name', 'coins.symbol as coin_symbol')
            ->join('coins', 'advertisements.coin_id', '=', 'coins.id')
            ->where('advertisements.status', self::ACTIVE)
            ->where('advertisements.id', $advertisementId)
            ->first();
    }

    /**
     * Finds advertisement by just id, no status is checked
     *
     * used specifically while changing status of advertisement.
     *
     * @see AdvertisementController::changeStatus()
     * @param int $advertisementId
     * @return mixed
     */
    public static function findAdvertisementWithoutStatus($advertisementId)
    {
        return self::select('advertisements.*', 'coins.name as coin_name', 'coins.symbol as coin_symbol')
            ->join('coins', 'advertisements.coin_id', '=', 'coins.id')
            ->where('advertisements.id', $advertisementId)
            ->first();
    }

    public static function findFatAdvertisement($advertisementId)
    {
        return self::select(
            'advertisements.*',
            'coins.name as coin_name',
            'coins.price as coin_price',
            'coins.symbol as coin_symbol',
            'users.username',
            'user_coins.balance as user_balance',
            'currencies.rate as currency_rate',
            'currencies.symbol as currency_symbol',
            'countries.name as country_name'
        )
            ->join('users', 'advertisements.user_id', '=', 'users.id')
            //->join('user_coins', 'advertisements.user_id', '=', 'user_coins.user_id')
            ->join('user_coins', function ($join) {
                $join->on('advertisements.user_id', '=', 'user_coins.user_id')->on('advertisements.coin_id', '=',
                    'user_coins.coin_id');
            })
            ->join('coins', 'advertisements.coin_id', '=', 'coins.id')
            ->join('currencies', 'advertisements.currency_id', '=', 'currencies.id')
            ->join('countries', 'advertisements.country_id', '=', 'countries.id')
            ->where('advertisements.status', self::ACTIVE)
            ->where('advertisements.id', $advertisementId)
            ->first();
    }

    /**
     * Find number of advertisements per user, per coin, per trade type
     *
     * It also finds HIDDEN advertisements.
     *
     * @param int $coinId
     * @param int $userId
     * @param int $tradeType
     * @return mixed
     */
    public static function findCountByUserByType($coinId, $userId, $tradeType)
    {
        return self::where('coin_id', $coinId)
            ->where('user_id', $userId)
            ->where('trade_type', $tradeType)
            ->whereIn('status', [self::ACTIVE, self::HIDDEN])
            ->count();
    }

    public static function findCountryOfAd($advertisementId)
    {
        return self::select(
            'countries.name as country_name'
        )
            ->join('countries', 'advertisements.country_id', '=', 'countries.id')
            ->where('advertisements.id', $advertisementId)
            ->first();
    }
    /*Find Queries End*/

    /*GET Queries Start*/

    /**
     * GETS advertisement `id`, `trade_type`, `margin_percentage`, `payment_method`, `min_limit`,
     * `max_limit`, `coin_price`, `coin_name`, `name` of users
     *
     * 1. `time_slot_count` : if time slot count is 0 then there will be no time bound for the advertisement i.e the advertisement will be visible 24x7
     *
     * 2. Ads which have time time slots for the days then those will be displayed on the home page on that day between the specified start_time and end_time
     *
     * 3. Previously `$offset` and `$limit` were passed but they are added in runtime now.
     *
     * @param mixed Carbon $date
     * @param int $tradeType
     * @param int $coinId
     * @param int $countryId
     * @return mixed
     */
    public static function getAdvertisementsBaseQuery(Carbon $date, $tradeType, $coinId, $countryId)
    {
        return self::selectRaw('Distinct(advertisements.id), trade_type, margin_percentage, min_limit, max_limit, coins.price as coin_price, coins.name as coin_name, users.username as name')
            ->join('users', 'advertisements.user_id', '=', 'users.id')
            ->join('user_coins', 'user_coins.user_id', '=', 'users.id')
            ->where('user_coins.coin_id', $coinId)
            ->where('users.status', self::ACTIVE)
            // ->where('users.suspended_till', '<', now())
            ->join('coins', 'advertisements.coin_id', '=', 'coins.id')
            ->leftJoin('advertisement_time_slots', 'advertisements.id', '=',
                'advertisement_time_slots.advertisement_id')
            ->where(function ($query) use ($date) {
                $query->where('time_slot_count', 0)
                    ->orWhere([
                        ['time_slot_count', '>', 0],
                        ['weekday', '=', $date->format('N')],
                        ['start_time', '<', $date->format('H:i:s')],
                        ['end_time', '>', $date->format('H:i:s')],
                        ['advertisement_time_slots.status', '=', 1],
                    ]);
            })
            ->where('trade_type', $tradeType)
            ->where('advertisements.coin_id', $coinId)
            ->where('advertisements.country_id', $countryId)
            ->where('advertisements.is_reported', 0)
            ->where('advertisements.status', self::ACTIVE);
    }

    /**
     * Gets a user's ACTIVE as well as HIDDEN advertisements with countries,coins name and symbol,currency symbols
     *
     * if limit is null or 0, fetches all advertisements
     *
     * @param int $limit
     * @param int $coinId
     * @param int $userId
     * @return mixed
     */
    public static function getUserAdvertisements($limit, $coinId, $userId)
    {
        $query = self::select(
            'advertisements.*',
            'countries.name as country_name',
            'coins.name as coin_name',
            'coins.symbol as coin_symbol',
            'currencies.symbol as currency_symbol'
        )
            ->join('coins', 'advertisements.coin_id', '=', 'coins.id')
            ->join('countries', 'advertisements.country_id', '=', 'countries.id')
            ->leftjoin('currencies', 'currencies.id', '=', 'advertisements.currency_id')
            ->where('coin_id', $coinId)
            ->where('user_id', $userId)
            ->whereIn('advertisements.status', [self::ACTIVE, self::HIDDEN] );
        if ($limit != null || $limit != 0) {
            $query = $query->limit($limit);
        }
        $query = $query->latest()->get();

        return $query;
    }

    /**
     * Gets a user's ACTIVE advertisements with countries,coins name and symbol,currency symbols
     *
     * if limit is null or 0, fetches all advertisements
     *
     * @param int $limit
     * @param int $coinId
     * @param int $userId
     * @return mixed
     */

    public static function getUsersActiveAdvertisementsOnly($limit, $coinId, $userId)
    {
        $query = self::select(
            'advertisements.*',
            'countries.name as country_name',
            'coins.name as coin_name',
            'coins.symbol as coin_symbol',
            'currencies.symbol as currency_symbol'
        )
            ->join('coins', 'advertisements.coin_id', '=', 'coins.id')
            ->join('countries', 'advertisements.country_id', '=', 'countries.id')
            ->leftjoin('currencies', 'currencies.id', '=', 'advertisements.currency_id')
            ->where('coin_id', $coinId)
            ->where('user_id', $userId)
            ->where('advertisements.status', self::ACTIVE);
        if ($limit != null || $limit != 0) {
            $query = $query->limit($limit);
        }
        $query = $query->latest()->get();

        return $query;
    }

    public static function getUserAdsByMonthByYear(
        $offset = null,
        $limit = null,
        $month = null,
        $year = null,
        $coinId,
        $userId
    ) {
        $query = self::select(
            'advertisements.*',
            'countries.name as country_name',
            'coins.name as coin_name',
            'coins.symbol as coin_symbol',
            'currencies.symbol as currency_symbol'
        )
            ->join('coins', 'advertisements.coin_id', '=', 'coins.id')
            ->join('countries', 'advertisements.country_id', '=', 'countries.id')
            ->leftjoin('currencies', 'currencies.id', '=', 'advertisements.currency_id')
            ->where('coin_id', $coinId)
            ->where('user_id', $userId)
            ->where('advertisements.status', self::ACTIVE);

        if (true == $year) {
            $query = $query->whereYear('advertisements.created_at', '=', $year);
        }

        if (true == $month) {
            $query = $query->whereMonth('advertisements.created_at', '=', $month);
        }

        if (true == $offset) {
            $query = $query->offset($offset);
        }

        if (true == $limit) {
            $query = $query->limit($limit);
        }

        $query = $query->latest('advertisements.created_at')->get();

        return $query;
    }


    public static function getUserAdsCountByMonthByYear($month = null, $year = null, $coinId, $userId)
    {
        $query = self::selectRaw('count(*) as `count`')
            ->join('coins', 'advertisements.coin_id', '=', 'coins.id')
            ->join('countries', 'advertisements.country_id', '=', 'countries.id')
            ->leftjoin('currencies', 'currencies.id', '=', 'advertisements.currency_id')
            ->where('coin_id', $coinId)
            ->where('user_id', $userId)
            ->where('advertisements.status', self::ACTIVE);

        if (true == $year) {
            $query = $query->whereYear('advertisements.created_at', '=', $year);
        }

        if (true == $month) {
            $query = $query->whereMonth('advertisements.created_at', '=', $month);
        }

        $query = $query->latest('advertisements.created_at')->first();

        return $query;
    }

    /**
     * Get advertisement by ad id, coin id, and user id where `status` = 1
     *
     * @param int $coinId
     * @param int $userId
     * @param int $advertisementId
     * @return mixed
     */
    public static function getUserAdvertisement($coinId, $userId, $advertisementId)
    {
        return self::where('coin_id', $coinId)->where('user_id', $userId)->where('id',
            $advertisementId)->active()->first();
    }

    public static function getUserAdvertisementPlain($coinId, $userId, $advertisementId)
    {
        return self::where('coin_id', $coinId)->where('user_id', $userId)->where('id',
            $advertisementId)->first();
    }

    public static function getTradesByAdvertisementsByUserIdCoinId($userId, $coinId)
    {
        return self::from('advertisements As ads')
            ->join('trades As tr', 'tr.advertisement_id', '=', 'ads.id')
            ->join('users As seller', 'seller.id', '=', 'tr.seller_id')
            ->join('users As buyer', 'buyer.id', '=', 'tr.buyer_id')
            ->select(
                'ads.id as ad_id',
                'ads.trade_type',
                'tr.id as tr_id',
                'tr.trade_status as tr_status',
                'tr.seller_trust_score',
                'tr.fiat_value',
                'tr.seller_id',
                'tr.created_at as tr_created_at',
                'seller.username As seller_username',
                'tr.buyer_id',
                'buyer.username As buyer_username'
            )
            ->where('ads.user_id', $userId)
            ->where('ads.coin_id', $coinId)
            ->get();
    }

    public static function getClosedTradesByAdvertisementsByUserIdCoinId(
        $offset = null,
        $limit = null,
        $month = null,
        $year = null,
        $userId,
        $coinId
    ) {
        $query = self::from('advertisements As ads')
            ->join('trades As tr', 'tr.advertisement_id', '=', 'ads.id')
            ->join('users As seller', 'seller.id', '=', 'tr.seller_id')
            ->join('users As buyer', 'buyer.id', '=', 'tr.buyer_id')
            ->select(
                'ads.id as ad_id',
                'ads.trade_type',
                'tr.id as tr_id',
                'tr.trade_status as tr_status',
                'tr.seller_trust_score',
                'tr.fiat_value',
                'tr.seller_id',
                'tr.created_at as tr_created_at',
                'seller.username As seller_username',
                'tr.buyer_id',
                'buyer.username As buyer_username'
            )
            ->where('ads.coin_id', $coinId)
            ->whereIn('tr.trade_status', [Trade::CLOSED, Trade::DISPUTE_CLOSED])
            ->where(function ($q) use ($userId) {
                $q->where('tr.buyer_id', $userId)
                    ->orWhere('tr.seller_id', $userId);
            });
        if (true == $year) {
            $query = $query->whereYear('tr.created_at', '=', $year);
        }

        if (true == $month) {
            $query = $query->whereMonth('tr.created_at', '=', $month);
        }

        if (true == $offset) {
            $query = $query->offset($offset);
        }
        if (true == $limit) {
            $query = $query->limit($limit);
        }

        $query = $query->latest('tr.created_at')->get();

        return $query;
    }

    public static function getAllClosedTradesCountByAdvertisementsByUserIdCoinId(
        $month,
        $year,
        $userId,
        $coinId
    ) {
        $query = self::from('advertisements As ads')
            ->join('trades As tr', 'tr.advertisement_id', '=', 'ads.id')
            ->join('users As seller', 'seller.id', '=', 'tr.seller_id')
            ->join('users As buyer', 'buyer.id', '=', 'tr.buyer_id')
            ->selectRaw('count(*) as `count`')
            ->where('ads.coin_id', $coinId)
            ->whereIn('tr.trade_status', [Trade::CLOSED, Trade::DISPUTE_CLOSED])
            ->where(function ($q) use ($userId) {
                $q->where('tr.buyer_id', $userId)
                    ->orWhere('tr.seller_id', $userId);
            });
        if ($year != 0) {
            $query = $query->whereYear('tr.created_at', '=', $year);
        }

        if ($month != 0) {
            $query = $query->whereMonth('tr.created_at', '=', $month);
        }


        $query = $query->first();

        return $query;
    }

    public static function getCancelledTradesByAdvertisementsByUserIdCoinId(
        $offset = null,
        $limit = null,
        $month = null,
        $year = null,
        $userId,
        $coinId
    ) {
        $query = self::from('advertisements As ads')
            ->join('trades As tr', 'tr.advertisement_id', '=', 'ads.id')
            ->join('users As seller', 'seller.id', '=', 'tr.seller_id')
            ->join('users As buyer', 'buyer.id', '=', 'tr.buyer_id')
            ->select(
                'ads.id as ad_id',
                'ads.trade_type',
                'tr.id as tr_id',
                'tr.trade_status as tr_status',
                'tr.seller_trust_score',
                'tr.fiat_value',
                'tr.seller_id',
                'tr.created_at as tr_created_at',
                'seller.username As seller_username',
                'tr.buyer_id',
                'buyer.username As buyer_username'
            )
            ->where('ads.coin_id', $coinId)
            ->where('tr.trade_status', Trade::CANCELLED)
            ->where('tr.trade_cancelled_by', $userId);

        if (true == $year) {
            $query = $query->whereYear('tr.created_at', '=', $year);
        }

        if (true == $month) {
            $query = $query->whereMonth('tr.created_at', '=', $month);
        }

        if (true == $offset) {
            $query = $query->offset($offset);
        }

        if (true == $limit) {
            $query = $query->limit($limit);
        }

        $query = $query->latest('tr.created_at')->get();

        return $query;
    }

    public static function getAllCancelledTradesCountByAdvertisementsByUserIdCoinId(
        $month,
        $year,
        $userId,
        $coinId
    ) {
        $query = self::from('advertisements As ads')
            ->join('trades As tr', 'tr.advertisement_id', '=', 'ads.id')
            ->join('users As seller', 'seller.id', '=', 'tr.seller_id')
            ->join('users As buyer', 'buyer.id', '=', 'tr.buyer_id')
            ->selectRaw('count(*) as `count`')
            ->where('ads.coin_id', $coinId)
            ->where('tr.trade_status', Trade::CANCELLED)
            ->where('tr.trade_cancelled_by', $userId);
        if ($year != 0) {
            $query = $query->whereYear('tr.created_at', '=', $year);
        }

        if ($month != 0) {
            $query = $query->whereMonth('tr.created_at', '=', $month);
        }


        $query = $query->first();

        return $query;
    }

    /*GET Queries End*/

    /*UPDATE Queries Start*/

    public static function updateAd($adId, $data)
    {
        return self::where('id', $adId)->update($data);
    }

    /*UPDATE Queries End*/
}

