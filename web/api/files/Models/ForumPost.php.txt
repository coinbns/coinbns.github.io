<?php

namespace App\Models;

use \App\Models;
use Auth;

class ForumPost extends Model
{
    //status
    const DELETED=0;
    const ACTIVE = 1;
    const INACTIVE = 2;

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function user()
    {
        return $this->belongsTo('App\Models\User');
    }

    /*Create Queries Start*/
    /**
     * Used to create post on User End
     * @param array $data
     * @return mixed
     */
    public static function createPost($data)
    {
        $post = new self;

        $post->forum_category_id = $data['forum_category_id'];
        $post->user_id = $data['user_id'];
        $post->title = $data['title'];
        $post->description = $data['description'];
        $post->status = $data['status'];
        $post->save();

        return $post->id;
    }

    /**
     * Used to create post on Admin End
     * @param array $data
     * @return bool
     */
    public static function create($data)
    {
        $post = new self;
        $post->title = $data['title'];
        $post->description = $data['description'];
        $post->forum_category_id = $data['category'];
        return $post->save();
    }
    /*Create Queries End*/

    /*Find Queries Start*/
    /**
     * Used to find Forum Post By ID on User End
     * @param int $id
     * @return mixed
     */
    public static function findForumPost($id)
    {
        return self::select('forum_posts.*', 'forum_categories.title as category_title',
            'forum_categories.url as category_url', 'users.username')
            ->join('forum_categories', 'forum_posts.forum_category_id', '=', 'forum_categories.id')
            ->join('users', 'forum_posts.user_id', '=', 'users.id')
            ->where('forum_posts.status', self::ACTIVE)
            ->where('forum_posts.id', $id)
            ->first();
    }

    /**
     * Used to find Forum Post By ID on Admin End
     * @param int $id
     * @return mixed
     */
    public static function findPost($id)
    {
        return self::join('forum_categories As categories', 'categories.id', '=', 'forum_posts.forum_category_id')
            ->leftjoin('users', 'users.id', '=', 'forum_posts.user_id')
            ->select(
                'categories.title As category_title',
                'categories.url As category_url',
                'users.username',
                'forum_posts.id As post_id',
                'forum_posts.title As post_title',
                'forum_posts.description As post_description',
                'forum_posts.updated_at As post_updated_at',
                'forum_posts.status As post_status'
            )
            ->where('forum_posts.id', $id)
            ->first();
    }
    /*Find Queries End*/

    /*Get Queries Start*/
    /**
     * Get forum posts by a specific category id with votes.
     *
     * @param int $offset
     * @param int $limit
     * @param int $forumCategoryId
     * @return mixed
     */
    public static function getByCategoryWithVote($offset, $limit, $forumCategoryId)
    {
        return self::selectRaw('forum_posts.id, forum_posts.title as title, forum_posts.description as description, forum_posts.created_at, forum_categories.title as category_title, forum_categories.url as category_url, users.username, SUM(forum_post_votes.value) as total_votes')
            ->leftJoin('forum_post_votes', 'forum_posts.id', '=', 'forum_post_votes.forum_post_id')
            ->join('forum_categories', 'forum_posts.forum_category_id', '=', 'forum_categories.id')
            ->join('users', 'forum_posts.user_id', '=', 'users.id')
            ->where('forum_posts.forum_category_id', $forumCategoryId)
            ->where('forum_posts.status', self::ACTIVE)
            ->groupBy('forum_posts.id')
            ->orderBy('total_votes', 'desc')
            ->offset($offset)
            ->limit($limit)
            ->get();
    }

    /**
     * Gets all posts in latest first order with total votes on each post
     *
     * @param int $offset
     * @param int $limit
     * @return mixed
     */
    public static function getLatestWithVote($offset, $limit)
    {
        return self::selectRaw('forum_posts.id, forum_posts.title as title, forum_posts.description as description, forum_posts.created_at, forum_categories.title as category_title, forum_categories.url as category_url, users.username, SUM(forum_post_votes.value) as total_votes')
            ->leftJoin('forum_post_votes', 'forum_posts.id', '=', 'forum_post_votes.forum_post_id')
            ->join('forum_categories', 'forum_posts.forum_category_id', '=', 'forum_categories.id')
            ->join('users', 'forum_posts.user_id', '=', 'users.id')
            ->where('forum_posts.status', self::ACTIVE)
            ->groupBy('forum_posts.id')
            ->latest()
            ->offset($offset)
            ->limit($limit)
            ->get();
    }

    /**
     * Searches and Gets Forum Posts where forum post title matches the string query provided.
     *
     * @param int $offset
     * @param int $limit
     * @param string $query
     * @return mixed
     */
    public static function search($offset, $limit, $query)
    {
        return self::selectRaw('forum_posts.id, forum_posts.title as title, forum_posts.description as description, forum_posts.created_at, forum_categories.title as category_title, forum_categories.url as category_url, users.username, SUM(forum_post_votes.value) as total_votes')
            ->leftJoin('forum_post_votes', 'forum_posts.id', '=', 'forum_post_votes.forum_post_id')
            ->join('forum_categories', 'forum_posts.forum_category_id', '=', 'forum_categories.id')
            ->join('users', 'forum_posts.user_id', '=', 'users.id')
            ->where('forum_posts.title', 'like', "%{$query}%")
            ->where('forum_posts.status', self::ACTIVE)
            ->groupBy('forum_posts.id')
            ->orderBy('total_votes', 'desc')
            ->offset($offset)
            ->limit($limit)
            ->get();
    }

    /**
     * Get Active forum posts by tags
     *
     * Uses multiple tables in joins
     *
     * @see \App\Models\ForumPostVote Forum Post Votes
     * @see \App\Models\ForumCategory Forum Categories
     * @see \App\Models\ForumPostTag Forum Post Tags
     * @see \App\Models\ForumTag Forum Tags
     * @see \App\Models\User Users
     * @param int $offset
     * @param int $limit
     * @param string $tag
     * @return mixed
     */
    public static function searchByTag($offset, $limit, $tag)
    {
        return self::selectRaw('forum_posts.id, forum_posts.title as title, forum_posts.description as description, forum_posts.created_at, forum_categories.title as category_title, forum_categories.url as category_url, users.username, SUM(forum_post_votes.value) as total_votes')
            ->leftJoin('forum_post_votes', 'forum_posts.id', '=', 'forum_post_votes.forum_post_id')
            ->join('forum_categories', 'forum_posts.forum_category_id', '=', 'forum_categories.id')
            ->join('forum_post_tags', 'forum_posts.id', '=', 'forum_post_tags.forum_post_id')
            ->join('forum_tags', 'forum_post_tags.forum_tag_id', '=', 'forum_tags.id')
            ->join('users', 'forum_posts.user_id', '=', 'users.id')
            ->where('forum_tags.name', $tag)
            ->where('forum_posts.status', self::ACTIVE)
            ->groupBy('forum_posts.id')
            ->orderBy('total_votes', 'desc')
            ->offset($offset)
            ->limit($limit)
            ->get();
    }

    /**
     * Get count of replies on forum posts individually.
     *
     * @param array $ids Array of Forum Post IDs
     * @return mixed
     */
    public static function getReplyCountByIds($ids)
    {
        return self::selectRaw('forum_posts.id as id, COUNT(forum_post_replies.id) as total_replies')
            ->leftJoin('forum_post_replies', 'forum_posts.id', '=', 'forum_post_replies.forum_post_id')
            ->whereIn('forum_posts.id', $ids)
            ->groupBy('forum_posts.id')
            ->get();
    }

    public static function getReplyCountById($id)
    {
        return self::selectRaw('forum_posts.id as id, COUNT(forum_post_replies.id) as total_replies')
            ->leftJoin('forum_post_replies', 'forum_posts.id', '=', 'forum_post_replies.forum_post_id')
            ->where('forum_posts.id', $id)
            ->first();
    }

    public static function getVoteCountById($id)
    {
        return self::selectRaw('forum_posts.id as id, SUM(forum_post_votes.value) as total_votes')
            ->leftJoin('forum_post_votes', 'forum_posts.id', '=', 'forum_post_votes.forum_post_id')
            ->where('forum_posts.id', $id)
            ->first();
    }

    /**
     * Used to fetch Post with Categories and Users on Admin End
     * @return mixed
     */
    public static function getPostsSlim()
    {
        return self::join('forum_categories As categories', 'categories.id', '=', 'forum_posts.forum_category_id')
            ->leftjoin('users', 'users.id', '=', 'forum_posts.user_id')
            ->select(
                'categories.title As category_title',
                'categories.url As category_url',
                'users.username',
                'forum_posts.id As post_id',
                'forum_posts.title As post_title',
                'forum_posts.updated_at As post_updated_at',
                'forum_posts.status As post_status'
            )
            ->orderBy('forum_posts.status')
            ->orderBy('forum_posts.id')
            ->get();
    }
    /*Get Queries End*/

    /*Update Queries Start*/
    /**
     * Used to Update the post on Admin End
     * @param int $postId
     * @param array $data
     * @return mixed
     */
    public static function updatePost($postId, $data)
    {
        return self::where('id', $postId)
            ->update($data);
    }
    /*Update Queries End*/
}

