<?php

namespace App\Notifications;

use Illuminate\Bus\Queueable;
use Illuminate\Notifications\Notification;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Messages\BroadcastMessage;

class AdminTicketReply extends Notification
{
    use Queueable;

    protected $ticketId;
    protected $userId;
    protected $message;
    protected $ticketStatus;

    /**
     * Create a new notification instance.
     *
     * @return void
     */
    public function __construct($ticketId, $userId, $message, $ticketStatus)
    {
        $this->ticketId = $ticketId;
        $this->userId = $userId;
        $this->message = $message;
        $this->ticketStatus = $ticketStatus;
    }

    /**
     * Get the notification's delivery channels.
     *
     * @param  mixed  $notifiable
     * @return array
     */
    public function via($notifiable)
    {
        return ['database', 'broadcast'];
    }

    /**
     * Get the mail representation of the notification.
     *
     * @param  mixed  $notifiable
     * @return \Illuminate\Notifications\Messages\MailMessage
     */
//    public function toMail($notifiable)
//    {
//        return (new MailMessage)
//                    ->line('The introduction to the notification.')
//                    ->action('Notification Action', url('/'))
//                    ->line('Thank you for using our application!');
//    }

    /**
     * Get the array representation of the notification.
     *
     * @param  mixed  $notifiable
     * @return array
     */
    public function toArray($notifiable)
    {
        return [
            'ticket_id' => (int)$this->ticketId,
            'user_id' => (int)$this->userId,
            'message' => $this->message,
            'status' => $this->ticketStatus
        ];
    }

    public function toBroadcast($notifiable)
    {
        return new BroadcastMessage([
            'data' => [
                'ticket_id' => encodeHash((int)$this->ticketId),
                'user_id' => encodeHash((int)$this->userId),
                'message' => $this->message,
                'status' => $this->ticketStatus
            ],
            'created_at' => now()->toDateTimeString()
        ]);
    }
}

