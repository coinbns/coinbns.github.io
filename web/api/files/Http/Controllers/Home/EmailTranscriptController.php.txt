<?php

namespace App\Http\Controllers\Home;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\Trade;
use App\Models\ChatMessage;
use App\Models\User;
use App\Models\Dispute;
use App\Models\DisputeChatMessage;
use Auth;
use Illuminate\Support\Facades\Mail;
use App\Mail\EmailTradeChatMessages;
use App\Mail\EmailDisputeChatMessages;
use Validator;

/**
 * Manages email transcripts of the chats e.g trade chats and dispute chats
 * Class EmailTranscriptController
 * @package App\Http\Controllers\Home
 */
class EmailTranscriptController extends Controller
{
    /**
     * Sends email with trade chat transcript in txt file to who has requested after the trade id successfully closed/completed.
     *
     * `TYPE_IMAGE` of the content is not taken in the transcript
     * @see \App\Http\Controllers\Home\EmailTranscriptController::stringSplitter() String Splitter
     * @see \App\Http\Controllers\Home\EmailTranscriptController::extractAltFromImgTag() Extracting ALT value from img tag
     * @param int $tradeId
     * @return mixed
     */
    public function emailTradeTranscript($tradeId)
    {
        $userId = Auth::id();
        $userEmail = Auth::user()->email;

        $trade = Trade::findClosedTradeByIdByUserId($tradeId, $userId);
        if (is_null($trade)) {
            return response()->api(false, 'Trade not available', null);
        }

        $tradeStartTime = $trade->created_at;
        $tradeCloseTime = $trade->updated_at;

        $messages='Trade#'.$tradeId."\n";
        $messages.='Trade Started at: '.$tradeStartTime."\n";
        $messages.='Trade Closed at: '.$tradeCloseTime."\n\n";
        $messages.="All the dates and times are in GMT\n\n\n";


        $tradeChats = ChatMessage::getAllChatByTradeId($tradeId);
        $seller_id=$trade->seller_id;
        $buyer_id=$trade->buyer_id;

        $seller_username=User::findById($seller_id)->username;
        $buyer_username=User::findById($buyer_id)->username;

        foreach($tradeChats as $trade_chat){
            if($trade_chat->type==ChatMessage::TYPE_TEXT){

                $stringArray=$this->stringSplitter($trade_chat->content);

                $textualString='';
                foreach($stringArray as $sa){
                    $ee=$this->extractAltFromImgTag($sa);
                    if(empty($ee)){
                        $textualString.=$sa.' ';
                    }else{
                        $textualString.=$ee[1].' ';
                    }


                }
                if($trade_chat->user_id==$seller_id){
                    $messages.='['.$trade_chat->created_at.']'.$seller_username.': '.$textualString."\n";
                }else{
                    $messages.='['.$trade_chat->created_at.']'.$buyer_username.': '.$textualString."\n";
                }

            } elseif ($trade_chat->type==ChatMessage::TYPE_DOC){
                if($trade_chat->user_id==$seller_id){
                    $messages.='['.$trade_chat->created_at.']'.$seller_username.': (file)'.$trade_chat->content['filename']."\n";
                }else{
                    $messages.='['.$trade_chat->created_at.']'.$buyer_username.': (file)'.$trade_chat->content['filename']."\n";
                }
            }

        }

        $messages.="\n\n\n\n Chat generated by system at: ".config('app.name')."\n\n\n";
        $fileName="Chat_transcript_for_Trade_".$tradeId."_".$userId.'.txt';

        Mail::to($userEmail)->queue(new EmailTradeChatMessages(
            $fileName,
            $tradeId,
            $tradeStartTime,
            $tradeCloseTime,
            $messages
        ));

        return response()->api(true, 'Email Sent Successfully', $fileName);

    }

    /**
     * Sends email with dispute chat transcript in txt file to who has requested after the trade id successfully closed/completed.
     *
     * @param int $disputeId
     * @return mixed
     */
    public function emailDisputeTranscript($disputeId)
    {
        $userId = Auth::id();
        $userEmail = Auth::user()->email;
        $username=Auth::user()->username;

        //check if dispute has been closed
        $closedDispute=Dispute::findClosedDisputeId($disputeId);
        if (is_null($closedDispute)) {
            return response()->api(false, 'Dispute not available', null);
        }

        $tradeId=$closedDispute->trade_id;
        $guilty_user_id=$closedDispute->guilty_user_id;
        if(is_null($guilty_user_id)){
            $guilty_username='NOT YET DECIDED';
            $guilty_description='NOT YET FINALISED';
        }else {
            $guilty_username = User::findById($guilty_user_id)->username;
            $guilty_description = $closedDispute->guilt_description;
        }

        $trade = Trade::findClosedTradeByIdByUserId($tradeId, $userId);
        if (is_null($trade)) {
            return response()->api(false, 'Trade not available', null);
        }

        $tradeStartTime = $trade->created_at;
        $tradeCloseTime = $trade->updated_at;

        $messages='Trade#'.$tradeId."\n";
        $messages.='Dispute#'.$disputeId."\n";
        $messages.='Trade Started at: '.$tradeStartTime."\n";
        $messages.='Trade Closed at: '.$tradeCloseTime."\n\n";

        $messages.='Guilty: '.$guilty_username."\n";
        $messages.='Description: '.$guilty_description."\n";

        $messages.="All the dates and times are in GMT\n\n\n";

        $disputeChats=DisputeChatMessage::getChatMessagesByDisputeIdByUserId($disputeId,$userId);

        foreach($disputeChats as $dispute_chat){
            if($dispute_chat->user_id==0 && $dispute_chat->message_for==$userId){
                $messages.='['.$dispute_chat->created_at.'] SUPPORT: '.$dispute_chat->content."\n";
            }else{
                $messages.='['.$dispute_chat->created_at.']'.$username.': '.$dispute_chat->content."\n";
            }
        }

        $messages.="\n\n\n\n Chat generated by system at: ".config('app.name')."\n\n\n";

        $fileName="Dispute_Chat_transcript_for_Trade_".$tradeId."_Dispute_".$disputeId."_".$userId.'.txt';

        Mail::to($userEmail)->queue(new EmailDisputeChatMessages(
            $fileName,
            $tradeId,
            $tradeStartTime,
            $tradeCloseTime,
            $messages,
            $disputeId
        ));

        return response()->api(true, 'Email Sent Successfully', $fileName);

    }

    /**
     * Splits string into array wherever there is <img> tag
     * @param string $string
     * @return array[]|false|string[]
     */
    protected function stringSplitter($string)
    {
        $array = preg_split('/(<img[^>]+\>)/i', $string, -1, PREG_SPLIT_DELIM_CAPTURE);
        return $array;
    }

    /**
     * Extracts the ALT value from an <img> tag
     * @param string $string
     * @return mixed
     */
    protected function extractAltFromImgTag($string)
    {
        preg_match('/<img.*?alt="(.*?)".*>/',$string,$match);
        return $match;

    }
}

