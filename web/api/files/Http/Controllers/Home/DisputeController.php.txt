<?php

namespace App\Http\Controllers\Home;

use Illuminate\Http\Request;
use Auth;
use Validator;
use App\Http\Controllers\Controller;
use App\Events\DisputeChatMessage;
use App\Models\DisputeChatMessage as ChatModel;
use App\Models\Dispute;
use App\Models\DisputeFeedback;
use Storage;
use Intervention\Image\ImageManagerStatic as Image;

/**
 * Manages the disputes on user end.
 *
 * @see \App\Http\Controllers\Admin\DisputeController For Admin end.
 * Class DisputeController
 * @package App\Http\Controllers\Home
 */
class DisputeController extends Controller
{
    /**
     * Fetches Dispute Chat Messages on user end
     *
     * 1. Check if dispute is open then proceed to point 2 else return `Dispute is closed`.
     *
     * 2. Check if user is associated with the disputeId then proceed to point 3 else return `User not Associated with Dispute ID`.
     *
     * 3. Gets messages of a dispute which user has sent and received.
     *
     * 4. Returns `disputed_trade_id`, `chats` and `admin_username` who is handling a particular dispute.
     *
     * @param int $disputeId
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function getDisputeChat($disputeId, Request $request)
    {

        $dispute = Dispute::findDisputeById($disputeId);
        if (false == empty($dispute)) {

            $check = Dispute::findUsersByDisputeId($disputeId);

            if (($check->buyer_id == Auth::user()->id) || $check->seller_id == Auth::user()->id) {

                $chats = ChatModel::getChatMessagesByDisputeIdByUserId($disputeId, Auth::user()->id);

                foreach($chats as $chat){
                    $chat->is_owner = $chat->user_id == 0 ? 0 : 1;
                }

                $data = [
                    'disputed_trade_id' =>$dispute->trade_id,
                    'admin_username' =>$dispute->admin_username,
                    'chats' => $chats,
                    'dispute_status' => $dispute->dispute_status
                ];
                return response()->api(true, 'success', $data);
            } else {
                return response()->json(['message' => 'User not Associated with Dispute ID'], 403);
            }
        } else {
            return response()->json(['message' => 'Dispute does not exist'], 404);
        }
    }

    /**
     * Used to create messages for dispute from user end.
     *
     * 1. If the message is of type `TYPE_TEXT` then create the message and `type` field will be `TYPE_TEXT` and broadcast it to others on `DisputeChatMessage` event.
     *
     * 2. If message is of type `TYPE_DOC` see DOC sub points else if message is of type `TYPE_IMAGE` see IMAGE sub points.
     *
     * <b>DOC:</b>
     * 1. Check if the document sent is PDF after converting it to `base64` string.
     *
     * 2. Open PDF file and try to read so that only readable pdf is uploaded avoiding corrupt pdfs.
     *
     * 3. Read first line of pdf to get version of the pdf.
     *
     * 4. If the PDF version is greater than 1.4 then convert the original pdf's version to 1.5 as it is more compatible to our application
     *
     * 5. Add watermark to every page of the pdf.
     *
     * 6. Create an entry in the mongo for the dispute chat where field `content` is an associative array having keys `data` and `file_name` and `type` field is `TYPE_DOC`
     *
     * 7. Broadcast it to others on `DisputeChatMessage` event.
     *
     * <b>IMAGE:</b>
     *
     * 1. Convert Image to `base64` string
     *
     * 2. Get image type and allowed image types are `image/jpeg`, `image/jpg`, `image/JPG`, `image/JPEG`, `image/png`, `PNG`
     *
     * 3. Add watermark to the image.
     *
     * 4. Create an entry in the mongo for the dispute chat where field `content` is base64 string of the uploaded image and `type` field is `TYPE_DOC`
     *
     * @param int $disputeId
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     * @throws \setasign\Fpdi\PdfParser\CrossReference\CrossReferenceException
     * @throws \setasign\Fpdi\PdfParser\Filter\FilterException
     * @throws \setasign\Fpdi\PdfParser\PdfParserException
     * @throws \setasign\Fpdi\PdfParser\Type\PdfTypeException
     * @throws \setasign\Fpdi\PdfReader\PdfReaderException
     */
    public function disputeChat($disputeId, Request $request)
    {
        /*
         * check if [open dispute] exist with disputeId
         */
        $ifDisputeOpen = \App\Models\Dispute::findOpenDisputeById($disputeId);
        if (true == empty($ifDisputeOpen)) {
            return response()->api(false, 'Dispute not accessible', null);
        }

        switch ($request->type) {
            case ChatModel::TYPE_TEXT:
                $content = $request->content;
                break;
            case ChatModel::TYPE_IMAGE:
                $content = $request->content;

                $image_type = substr($content, 5, strpos($content, ';') - 5);
                $allowedImageType = [
                    'image/jpeg',
                    'image/jpg',
                    'image/JPG',
                    'image/JPEG',
                    'image/png',
                    'image/PNG',
                ];

                if (false == in_array($image_type, $allowedImageType)) {
                    return response()->api(false, 'image is invalid', null);
                }

                $image = Image::make($content);
                $watermark = Image::make(public_path('/images/faster.png'));
                $image->insert($watermark, 'bottom-right', 10, 10);
                $content = (string)$image->encode('data-url');

                break;
            case ChatModel::TYPE_DOC:

                preg_match("/^data:application\/(.*);base64/i", $request->content['data'], $match);
                $extension = $match[1];


                if (true == empty($request->content['data'])
                    || true == empty($request->content['file_name'])
                    || ! in_array($extension, [
                        'pdf',
                        'PDF'
                    ])) {
                    return response()->api(false, 'pdf is invalid', null);
                }
                $fileName = mt_rand() . '_og.pdf';
                $destName = mt_rand() . '_dest.pdf';
                $filePath = storage_path("app/{$fileName}");
                $destPath = storage_path("app/{$destName}");
                Storage::put($fileName, base64_decode(substr($request->content['data'], 28)));

                $filepdf = fopen($filePath, "r");
                if ($filepdf) {
                    $line_first = fgets($filepdf);
                    fclose($filepdf);
                } else {
                    return response()->api(false, 'Error opening file', null);
                }
                // extract number such as 1.4 ,1.5 from first read line of pdf file
                preg_match_all('!\d+!', $line_first, $matches);
                // save that number in a variable
                $pdfversion = implode('.', $matches[0]);
                $convertedName = null;
                if ($pdfversion > "1.4") {
                    $convertedName = mt_rand() . '_conv.pdf';
                    $convertedPath = storage_path("app/{$convertedName}");
                    $command = 'gs -dBATCH -dCompatibilityLevel=1.5 -dQUIET -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="' . $convertedPath . '" "' . $filePath . '"';
                    $exe = shell_exec($command);
                }

                $pdf = new \setasign\Fpdi\Fpdi();
                $pageCount = $pdf->setSourceFile($convertedPath ?? $filePath);
                // dump($pageCount);
                for ($i = 1; $i <= $pageCount; $i++) {
                    $pdf->AddPage();
                    $tplIdx = $pdf->importPage($i);
                    // dump($tplIdx);
                    $pdf->useTemplate($tplIdx);

                    $pdf->Image(public_path('images/faster.png'), 10, 10, -300);
                }

                $pdf->Output('F', $destPath);

                $content = [
                    'data' => 'data:application/pdf;base64,' . base64_encode(file_get_contents($destPath)),
                    'file_name' => $request->content['file_name'],
                ];
                Storage::delete([$fileName, $destName]);
                if ($convertedName != null) {
                    Storage::delete($convertedPath);
                }
                break;
        }

        if (false == ChatModel::createChatMessage([
                'dispute_id' => $disputeId,
                'user_id' => Auth::user()->id,
                'type' => $request->type,
                'content' => $content,
                'recipient_id' => 0,
                'recipient_read_at' => null,
                'created_at' => now()->toDateTimeString(),
                'status' => ChatModel::ACTIVE,
            ])) {
            return response()->api(false, 'Error while storing message', null);
        }

        broadcast(new DisputeChatMessage($disputeId, $content, Auth::user()->id, $request->type))->toOthers();

        return response()->api(true, 'Successfully stored message and sent response', null);
    }

    /**
     * To create feedback after the dispute has been resolved
     * @param int $disputeId
     * @param Request $request
     * @return mixed
     */
    public function createFeedback($disputeId, Request $request)
    {
        $userId = Auth::user()->id;
        $disputeId = $disputeId;

        $dispute = Dispute::findDisputeByDisputeIdByUserId($disputeId, $userId);

        if (true == is_null($dispute)) {
            return response()->api(false, 'Dispute not found', null);
        }

        $validator = Validator::make($request->all(), [
            'feedback' => 'required|integer',
            'description' => 'required'
        ]);
        if ($validator->fails()) {
            return response()->api(false, implode(', ', $validator->errors()->all()), null);
        }

        $feedback = DisputeFeedback::createFeedback([
            'feedback' => $request->feedback,
            'dispute_id' => $disputeId,
            'user_id' => $userId,
            'description' => $request->description,
        ]);

        if (false == $feedback) {
            return response()->api(false, 'Feedback not captured, some internal error occurred', null);
        }

        return response()->api(true, 'Feedback captured successfully', null);
    }
}

