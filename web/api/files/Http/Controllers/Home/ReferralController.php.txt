<?php

namespace App\Http\Controllers\Home;

use App\Http\Controllers\Controller;
use App\Mail\Referral as ReferralMail;
use App\Models\Referral;
use App\Models\User;
use App\Models\UnregisteredUser;
use Auth;
use Illuminate\Http\Request;
use Mail;
use Validator;

/**
 * Manages Referrals
 * Class ReferralController
 * @package App\Http\Controllers\Home
 */
class ReferralController extends Controller
{

    protected $registerUrl = '/signup?referral=%s&coin=%s';
    /**
     * Fetches all Referral meta
     *
     * @param Request $request
     * @return mixed
     */
    public function getReferralMeta(Request $request)
    {
        // dd(Auth::user()->created_at->diffInDays(now()) >= config('app.referral_days'));
        $hasBeenReferred = (Auth::user()->created_at->diffInDays(now()) >= config('app.referral_days')) ? true : (Referral::findReferredUser(Auth::id()) != null);

        $referrals = Referral::getUserReferrals($request->offset ?? 0, $request->limit ?? 10, $request->coin_id, Auth::id())->map(function ($referral, $key) {
            return $referral->setVisible([]);
        });

        return response()->api(true, 'referral meta fetched', [
            'referral_username' => Auth::user()->username,
            'has_been_referred' => $hasBeenReferred,
            'referrals' => $referrals,
            'total_credited_amount' => Referral::getReferrerUserTotalCreditedAmount($request->coin_id, Auth::id())
        ]);
    }

    public function getReferrals(Request $request)
    {
        $referrals = Referral::getUserReferrals($request->offset ?? 0, $request->limit ?? 10, $request->coin_id, Auth::id())->map(function ($referral, $key) {
            return $referral->setVisible([]);
        });

        return response()->api(true, 'referral meta fetched', $referrals);
    }

    /**
     * Set the user's referrer
     *
     * @param Request $request
     * @return mixed
     */
    public function setReferredBy(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'referrer_username' => 'required',
        ]);
        if ($validator->fails()) {
            return response()->api(false, implode(', ', $validator->errors()->all()), null);
        }

        $referredUser = Referral::findReferredUser(Auth::id());
        if (false == empty($referredUser)) {
            return response()->api(false, 'You have been already referred', null);
        }

        $referrerUser = User::findByUsername($request->referrer_username);
        if (true == empty($referrerUser)) {
            return response()->api(false, 'Referrer user not found', null);
        }

        if ($referrerUser->id == Auth::id()) {
            return response()->api(false, 'You cannot refer yourself', null);
        }

        $referralMaxLimit = $request->coin_obj->detail->misc_data['referralCoinLimit'] ?? Referral::REFERRAL_DEFAULT_AMOUNT;
        $amountToCredit = ($referralMaxLimit * Referral::REFERRAL_PERCENTAGE) / 100;

        Referral::createReferral([
            'unregistered_user_id' => 0,//not neccessary to store it at this stage
            'referrer_user_id' => $referrerUser->id,
            'coin_id' => $request->coin_id,
            'referred_user_id' => Auth::id(),
            'max_coin_treshold' => $referralMaxLimit,
            'amount_to_credit' => $amountToCredit,
            'referral_status' => Referral::USED,
            'status' => Referral::ACTIVE,
        ]);

        return response()->api(true, 'You have been referred successfully', null);
    }

    public function sendReferralMail(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'referred_email' => 'required|email',
        ]);
        if ($validator->fails()) {
            return response()->api(false, implode(', ', $validator->errors()->all()), null);
        }

        if (false == empty(UnregisteredUser::findByEmail($request->referred_email))) {
            return response()->api(false, 'Email already exist', null);
        }

        $referralUrl = url(sprintf($this->registerUrl, Auth::user()->username, $request->coin));
        Mail::to($request->referred_email)->queue(new ReferralMail(Auth::user()->username, $referralUrl));

        return response()->api(true, 'Referral mail sent successfully', null);
    }
}

