<?php

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Role;
use App\Permission;
use App\PermissionRole;
use App\Models\Admin;
use Validator;
use DB;
use Auth;

class RoleController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $roleId = Auth::guard('admin')->user()->roles()->get()[0]->id;
        $childRoles = $this->getChildRolesOfParentRoles((array)$roleId,[]);

        return view('admin.users.viewRoles')->with([
            'roles' => $childRoles,
            'permissions' => Permission::get(),
            'special_permissions' => PermissionRole::getSpecialPermissionIdsByRoleId(Auth::guard('admin')->user()->roles()->get()[0]->id)
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create(Request $request)
    {

        $validator = Validator::make($request->all(), [
            'name' => 'required|regex:/^[a-zA-Z]+$/u|max:191|unique:roles,name',
            'display_name' => 'required',
            'description' => 'required'
        ]);

        if ($validator->fails()) {
            return redirect()
                ->route('admin.roles')
                ->withErrors($validator)
                ->withInput();
        }

        $role = Role::create([
            'name' => $request->name,
            'display_name' => $request->display_name,
            'description' => $request->description
        ]);

        foreach ($request->permissions as $key => $value) {
            $role->attachPermission($value);
        }

        return redirect()->route('admin.roles');
    }


    /**
     * Show the form for editing the specified resource.
     *
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $currentRoleId = Auth::guard('admin')->user()->roles()->get()[0]->id;
        if(false == $this->evaluateChildRole($id,$currentRoleId)){
            abort(404);
        }
        $role = Role::findById($id);
        $permissions = Permission::get();
        $rolePermissions = $role->perms()->pluck('id', 'id')->toArray();
        if (false == $role) {
            abort(404);
        } else {
            return view('admin.users.editRole')->with([
                'role' => $role,
                'permissions' => $permissions,
                'role_permissions' => $rolePermissions
            ]);
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request $request
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request)
    {
        $roleId = $request->role_id;
        $validator = Validator::make($request->all(), [
            'name' => 'required|min:3|max:191|unique:roles,name,' . $roleId,
            'display_name' => 'required',
            'description' => 'required'
        ]);

        if ($validator->fails()) {
            return redirect()
                ->route('admin.role.edit', array($roleId))
                ->withErrors($validator)
                ->withInput();
        }

        $role = Role::findById($roleId);

        $role->name = $request->name;
        $role->display_name = $request->display_name;
        $role->description = $request->description;
        $role->save();

        PermissionRole::deletePermissionByRoleId($roleId);
        if ( ! empty($request->permissions)) {
            foreach ($request->permissions as $key => $value) {
                $role->attachPermission($value);
            }
        }

        return redirect()->route('admin.role.edit', array($roleId));
    }

    public function specialPermission($id)
    {

        $permissionsByRole = Permission::getPermissionsByRoleId($id);
        if (count($permissionsByRole) <= 0) {
            abort(404);
        } else {
            return view('admin.users.specialPermission')->with(compact('permissionsByRole', 'id'));
        }

    }

    public function updateSpecialPermissions(Request $request)
    {

        $roleId = $request->role_id;
        //reset all specialpermissions of a role id
        PermissionRole::resetSpecialPermissions($roleId);

        if ( ! empty($request->permissions)) {
            PermissionRole::updateSpecialPermission($roleId, $request->permissions);
        }
        return redirect()->back();
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}

