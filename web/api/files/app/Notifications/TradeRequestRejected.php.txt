<?php

namespace App\Notifications;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Messages\BroadcastMessage;
use Illuminate\Notifications\Notification;

class TradeRequestRejected extends Notification //implements ShouldQueue
{
    use Queueable;

    protected $tradeId;
    protected $message;
    protected $advertisementId;

    /**
     * Create a new notification instance.
     *
     * @return void
     */
    public function __construct($tradeId, $message, $advertisementId)
    {
        $this->tradeId = $tradeId;
        $this->message = $message;
        $this->advertisementId = $advertisementId;
    }

    /**
     * Get the notification's delivery channels.
     *
     * @param  mixed $notifiable
     * @return array
     */
    public function via($notifiable)
    {
        return ['database', 'broadcast'];
    }

    /**
     * Get the mail representation of the notification.
     *
     * @param  mixed $notifiable
     * @return \Illuminate\Notifications\Messages\MailMessage
     */
    // public function toMail($notifiable)
    // {
    //     return (new MailMessage)
    //                 ->line('The introduction to the notification.')
    //                 ->action('Notification Action', url('/'))
    //                 ->line('Thank you for using our application!');
    // }

    /**
     * Get the array representation of the notification.
     *
     * @param  mixed $notifiable
     * @return array
     */
    public function toArray($notifiable)
    {
        return [
            'trade_id' => (int)$this->tradeId,
            'message' => $this->message,
            'advertisement_id' => (int)$this->advertisementId,
            'status' => 'rejected',
        ];
    }

    public function toBroadcast($notifiable)
    {
        return new BroadcastMessage([
            'data' => [
                'trade_id' => encodeHash((int)$this->tradeId),
                'message' => $this->message,
                'advertisement_id' => encodeHash((int)$this->advertisementId),
                'status' => 'rejected',
            ],
            'created_at' => now()->toDateTimeString()
        ]);
    }
}

