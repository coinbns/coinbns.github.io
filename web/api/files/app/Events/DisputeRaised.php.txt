<?php

namespace App\Events;

use App\Models\Trade;
use Illuminate\Broadcasting\Channel;
use Illuminate\Queue\SerializesModels;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Broadcasting\PresenceChannel;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;

/**
 * This event is fired when user (buyer/seller) raises dispute during trade.
 * Class DisputeRaised
 * @package App\Events
 */
class DisputeRaised implements ShouldBroadcast
{
    use InteractsWithSockets, SerializesModels;

    public $tradeId;
    public $trade_status;

    public function __construct($tradeId)
    {
        $this->tradeId = encodeHash($tradeId);
        /** @var int trade_status  It is listened at user view (vue)
         * so that trade notification can be modified for an Open Dispute
         */
        $this->trade_status = Trade::DISPUTE_OPEN;
    }

    public function broadcastOn()
    {
        return new PresenceChannel('chat-trade.' . $this->tradeId);
    }
}

