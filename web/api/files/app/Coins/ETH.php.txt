<?php

namespace App\Coins;

use App\Coins\Contracts\CoinContract;
use App\Events\BalanceUpdate;
use App\Events\ErrorBroadcasting;
use App\Models\FundAddress;
use App\Models\PublicAddress;
use App\Models\StorageAddress;
use App\Models\Trade;
use App\Models\Transaction;
use App\Models\TransactionLog;
use App\Models\User;
use App\Models\UserCoin;
use App\Models\WithdrawalRequest;
use GuzzleHttp\Client;
use Illuminate\Validation\Rule;
use Murich\PhpCryptocurrencyAddressValidation\Validation\ETH as ETHAddressValidator;
use Validator;

class ETH implements CoinContract
{
    // protected $storageMaxLimit = 5.00000; 
    // protected $tradeCommissionTreshold = 0.01000000; //0.01000000
    // protected $withdrawalApprovalLimit = 0.5000000; //0.5000000;

    protected $nonceUrl = "https://api.etherscan.io/api?module=proxy&action=eth_getTransactionCount&address=";

    //ropsten
    protected $chainId = '3';

    public function getMiscDataValidatorFields()
    {
        return [
            'storageMaxLimit' => 'required|numeric',
            'tradeCommissionTreshold' => 'required|numeric',
            'withdrawalApprovalLimit' => 'required|numeric',
        ];
    }

    public function getWithdrawalApprovalLimit($coin)
    {
        // if ($inSatoshi) {
        //     return $coin->detail->misc_data['withdrawalApprovalLimit'] * pow(10, 8);
        // }
        return $coin->detail->misc_data['withdrawalApprovalLimit'];
    }

    public function addressValidator($address)
    {
        $validator = (new ETHAddressValidator($address));

        return $validator->validate();
    }

    public function getRecievingAddress($coin, $user)
    {
        $publicAddress = PublicAddress::findByUserId(0, $coin->id, $user->id);
        if (true == empty($publicAddress)) {
            $publicAddress = PublicAddress::findDeAllocatedAddress($coin->id);
            if (true == empty($publicAddress)) {
                return [
                    'status' => false,
                    'message' => 'Address is not available',
                    'data' => null,
                ];
            }
            // dd($publicAddress->address);
            $http = new Client;
            try {
                $subResponse = $http->post(config('app.subscriber_endpoint') . "/subscribe-address", [
                    'form_params' => [
                        'address' => $publicAddress->address,
                        'coin' => $coin->symbol,
                        'type' => 'public',
                        'key' => config('app.connector_key'),
                    ],
                ]);
            } catch (\Exception $e) {
                return [
                    'status' => false,
                    'message' => "Error caught while subscribing address, please try again later",
                    'data' => null,
                ];
            }

            if ($subResponse->getStatusCode() != 200
                || json_decode($subResponse->getBody())->status == false) {
                return [
                    'status' => false,
                    'message' => 'Error while subscribing to address',
                    'data' => null,
                ];
            }
            $publicAddress->user_id = $user->id;
            $publicAddress->assigned_at = now()->toDateTimeString();
            $publicAddress->save();
        }

        return [
            'status' => true,
            'message' => 'Address fetched',
            'data' => $publicAddress->address,
        ];
    }

    public function storeCoin($coin)
    {
        $log = [];
        $depositTxos = Transaction::getUnStoredDepositsByCoin($coin->id)->load(['public_address']);
        if ($depositTxos->isEmpty()) {
            $log[] = 'no deposits';
            return $log;
        }
        //to-do:filter or something else to restrict if amount is less than the fees

        $storageAddress = StorageAddress::findCanUseAddressPlain($coin->id);
        if (true == empty($storageAddress) || $storageAddress->amount > $coin->detail->misc_data['storageMaxLimit']) {
            $storageAddress = StorageAddress::findUnusedAddress($coin->id);
            if (true == empty($storageAddress)) {
                $log[] = "no unused storage address found, please add storage addresses for {$coin->symbol}";
                $this->broadcastError("CRON_STORE_COIN", $log[count($log)]);
                return $log;
            }
        }
        $log[] = "storage address used #{$storageAddress->id} address {$storageAddress->address} bip_path " . sprintf(
            config('app.bip_path_template'),
            $coin->detail->bip_path_start,
            $storageAddress->account_no,
            0,
            $storageAddress->index_no
        );

        $transactionRequests = [];
        foreach ($depositTxos as $key => $depositTxo) {
            $bipPath = sprintf(
                config('app.bip_path_template'),
                $coin->detail->bip_path_start,
                $depositTxo->public_address->account_no,
                0,
                $depositTxo->public_address->index_no
            );

            try {
                $nonceResponse = file_get_contents("{$this->nonceUrl}{$depositTxo->public_address->address}");
                $nonceResponseConverted = json_decode($nonceResponse);
                if (empty($nonceResponseConverted->result)) {
                    throw new \Exception("Incorrect response => {$nonceResponse}");
                }
                $nonce = hexdec($nonceResponseConverted->result);
            } catch (\Exception $e) {
                $log[] = "error while fetching nonce for {$depositTxo->public_address->address}: {$e->message}, the nonce response: ".($nonceResponse ?? 'wrong response');
                $this->broadcastError("CRON_STORE_COIN", $log[count($log)]);
                continue;
            }


            $amount = floor(($this->convertEther($depositTxo->amount, 'mwei') - $this->calculateGasFee('mwei')))." mwei";
            array_push($transactionRequests, [
                'to_address' => $storageAddress->address,
                'amount' => $amount,
                'chain_id' => $this->chainId,
                'bip_path' => $bipPath,//from,
                'nonce' => $nonce,
                'gas_limit' => '21000',
                'gas_price' => '21000',
            ]);
            $log[] = "deposit transaction #{$depositTxo->id} with address {$depositTxo->public_address->address} bip_path {$bipPath} to storage address #{$storageAddress->id}:{$storageAddress->address}";
        }

        $transData = [
            'transaction_requests' => $transactionRequests,
        ];
        // dd($coin->detail->broadcast_tx_url, $coin->detail->broadcast_tx_key);
        // $transData = $transactionRequests[0];
        // dd($transData);

        $log[] = "o/p data " . json_encode($transData);
        // dd($transData);
        // // dd(json_encode($transData));

        //nodeRequest
        // dump($transData);
        $nodeResponse = makeNodeRequest($transData, '/api/sign_eth_txs');
        // dd($nodeResponse);
        if ($nodeResponse['status'] == false) {
            $log[] = $nodeResponse['message'];
            $this->broadcastError("CRON_STORE_COIN", $log[count($log)]);
            return $log;
        }
        // dd($nodeResponse['data']);
        if (count($nodeResponse['data']) != count($transactionRequests)) {
            $log[] = 'ETH transactionRequests count and response count is not the same, transactionRequests: '.json_encode($transactionRequests).', response data: '.json_encode($nodeResponse['data']);
            $this->broadcastError("CRON_STORE_COIN", $log[count($log)]);
            return $log;
        }
        $http = new Client();
        foreach ($nodeResponse['data'] as $key => $txHash) {
            // broadcast
            if ($txHash->success == false) {
                $log[] = 'Success false while signing '.json_encode($transData[$key]).' with message: '.$txHash->message;
                continue;
            }
            // dump($txHash->tx_hash, [
            //     $coin->detail->broadcast_tx_key => $txHash->tx_hash,
            // ]);
            try {
                $brResponse = $http->request('POST', $coin->detail->broadcast_tx_url, [
                    'form_params' => [
                        $coin->detail->broadcast_tx_key => $txHash->tx_hash,
                    ],
                ]);
                // dump($brResponse);
                $brResponseString = (string) $brResponse->getBody();
                $brResponseStringDecoded = json_decode($brResponseString);
                // dump($brResponseStringDecoded);
                if (empty($brResponseStringDecoded->result)) {
                    throw new \Exception('Wrong response for '.json_encode($transactionRequests[$key]).' with message: '.$brResponseString);
                }
                $txId = $brResponseStringDecoded->result;
                // dump($txId);
                $log[] = "txId: {$txId} for ".json_encode($transactionRequests[$key])." with signed tx {$txHash->tx_hash}";
            } catch (\Exception $e) {
                $log[] = "broadcast Error: {$e->getMessage()}";
                $this->broadcastError("CRON_STORE_COIN", $log[count($log)]);
                continue;
                // return $log;
            }

            $depositTxos[$key]->is_stored = Transaction::IS_STORED;
            $depositTxos[$key]->save();

            if ($storageAddress->mode != StorageAddress::CAN_USE) {
                //subscribing to node
                try {
                    $subResponse = $http->post(config('app.subscriber_endpoint') . "/subscribe-address", [
                        'form_params' => [
                            'address' => $storageAddress->address,
                            'coin' => $coin->symbol,
                            'type' => 'storage',
                            'key' => config('app.connector_key'),
                        ],
                    ]);
    
                    if ($subResponse->getStatusCode() != 200
                        || json_decode($subResponse->getBody())->status == false) {
                        $log[] = "Error while subscribing to address, error {$subResponse->getBody()}";
                        $this->broadcastError("CRON_STORE_COIN", $log[count($log)]);
                        // dd($log);
                        // return $log;
                    }
                } catch (\Exception $e) {
                    $log[] = "subscriber node Error {$e->getMessage()}";
                    $this->broadcastError("CRON_STORE_COIN", $log[count($log)]);
                    // return $log;
                }

                $storageAddress->mode = StorageAddress::CAN_USE;
                $storageAddress->save();
            }
            //send next request after some time
            sleep(2);
        }

        return $log;
    }

    public function depositAmount($request)
    {
        $validator = Validator::make($request->all(), [
            'address' => 'required',
            'deposits' => 'required|array',
            'deposits.*.tx_id' => 'required',
            'deposits.*.amount' => 'required',
        ]);
        if ($validator->fails()) {
            return response()->api(false, implode(', ', $validator->errors()->all()), null);
        }
        $address = $request->address;
        $coin = $request->coin_obj;

        $publicAddress = PublicAddress::findAddress($coin->id, $address);
        if (true == empty($publicAddress)) {
            return response()->api(false, 'Address not found', null);
        }

        foreach ($request->deposits as $key => $deposit) {
            $transactionId = Transaction::createTransaction([
                'user_id' => $publicAddress->user_id,
                'coin_id' => $publicAddress->coin_id,
                'amount' => $deposit['amount'],
                'public_address_id' => $publicAddress->id,
                'tx_id' => $deposit['tx_id'],
                'v_out' => null,
                'trade_id' => null,
                'type' => Transaction::DEPOSIT,
                'fees' => 0,
                'is_transacted' => 1,
                'is_stored' => 0,
                'status' => Transaction::ACTIVE,
            ]);

            TransactionLog::createLog([
                'user_id' => $publicAddress->user_id,
                'transaction_id' => $transactionId,
                'description' => "{$deposit['amount']} {$coin->symbol} is deposited for " . User::find($publicAddress->user_id)->username . " by tx {$deposit['tx_id']}",
                'created_at' => now(),
                'status' => TransactionLog::ACTIVE,
            ]);
        }

        $balance = Transaction::getBalance($publicAddress->coin_id, $publicAddress->user_id);
        UserCoin::updateBalance($publicAddress->coin_id, $publicAddress->user_id, $balance);

        broadcast(new BalanceUpdate($publicAddress->user_id, $coin->symbol, $balance));

        return response()->api(true, 'Success', null);
    }

    public function markAddress($request)
    {
        //update balance
        $validator = Validator::make($request->all(), [
            'address' => 'required',
            'amount' => 'required',
            'address_type' => 'required'
        ]);
        if ($validator->fails()) {
            return response()->api(false, implode(', ', $validator->errors()->all()), null);
        }

        switch ($request->address_type) {
            case 'storage':
                $address = StorageAddress::findCanUseAddressPlain($request->coin_id, $request->address);
                break;
            case 'fund':
                $address = FundAddress::findCanUseAddressPlain($request->coin_id, $request->address);
                break;
            default:
                return response()->api(false, 'address type is not valid', null);
                break;
        }

        if (true == empty($address)) {
            return response()->api(false, 'address not found', null);
        }
        
        $address->amount = $request->amount;
        $address->save();

        return response()->api(true, 'address successfully updated', null);
    }

    public function transferCoin($coin)
    {
        //get all deposit trans
        $withdrawalRequests = WithdrawalRequest::getUnprocessedApprovedRequests($coin->id);
        // dump($withdrawalRequests->toArray());
        if ($withdrawalRequests->isEmpty()) {
            $log[] = 'No withdrawal requests';
            return $log;
        }

        $log = [];
        $inputStorageAddresses = StorageAddress::findCanUseAddressesPlain($coin->id)->sortByDesc('amount');
        if ($inputStorageAddresses->isEmpty()) {
            $log[] = 'No can use storage addresses';
            $this->broadcastError("CRON_TRANSFER_COIN", $log[count($log)]);
            return $log;
        }
        // dump($inputStorageAddresses->toArray());

        $transactionRequests = [];
        $isFundIncluded = $isStorageIncluded = false;
        $totalWithdrawalAmount = $totalWithdrawalFees = 0;

        $commissionTrades = Trade::getCommissionNotTransferredTrades($coin->id);
        $tradeCommisionValue = $this->convertEther($commissionTrades->sum('commision_value'), 'mwei');

        $txFee = $this->calculateGasFee('ether');
        if ($tradeCommisionValue > $this->convertEther($coin->detail->misc_data['tradeCommissionTreshold'], 'mwei')) {
            $fundAddress = FundAddress::findCanUseAddressPlain($coin->id);
            if (true == empty($fundAddress) || $fundAddress->amount > $coin->detail->misc_data['storageMaxLimit']) {
                $fundAddress = FundAddress::findUnusedAddress($coin->id);
                if (true == empty($fundAddress)) {
                    $log[] = "no unused fund address found, please add fund addresses for {$coin->symbol}";
                    $this->broadcastError("CRON_TRANSFER_COIN", $log[count($log)]);
                    return $log;
                }
            }
            $isFundIncluded = true;
        } else {
            //$tradeCommisionValue is not considered
            $log[] = "Fund not included as commission {$commissionTrades->sum('commision_value')}< treshold {$coin->detail->misc_data['tradeCommissionTreshold']}";
            $tradeCommisionValue = 0;
        }
        $totalWithdrawalAmount += $this->convertEther($withdrawalRequests->sum('transfer_amount'), 'mwei');

        // dump($transactionRequests);
        $totalWithdrawalFees = ($withdrawalRequests->count() + ($isFundIncluded ? 1 : 0)) * $txFee;
        $totalOutputAmount = $totalWithdrawalAmount + $tradeCommisionValue + $totalWithdrawalFees;
        // dump('total amount', 
        //     $totalOutputAmount, 
        //     'total withdrawal', 
        //     $totalWithdrawalAmount,
        //     'total commission', 
        //     $tradeCommisionValue,
        //     'total with fees',
        //     $totalWithdrawalFees
        // );
        // dump(
        //     'sum of stored addr',
        //     $this->convertEther($inputStorageAddresses->sum('amount'), 'mwei'), 
        //     'sum of stored addr - total o/p amt',
        //     $this->convertEther($inputStorageAddresses->sum('amount'), 'mwei') - $totalOutputAmount
        // );
        // dd(1);
        //initail check
        if ($this->convertEther($inputStorageAddresses->sum('amount'), 'mwei') < $totalOutputAmount) {
            $log[] = "inputs not enough, input:" . $inputStorageAddresses->sum('amount') * pow(10, 8) . ", output amount {$totalOutputAmount} = withdrawal amount:{$totalWithdrawalAmount} + trade commision value:{$tradeCommisionValue}";
            $this->broadcastError("CRON_TRANSFER_COIN", $log[count($log)]);
            return $log;
        }

        if (true == $isFundIncluded) {
            $storageAddressForFund = $inputStorageAddresses[0];
            $storageAddressForFund->amount -= ($commissionTrades->sum('commision_value') + $txFee);
            $bipPath = sprintf(
                config('app.bip_path_template'),
                $coin->detail->bip_path_start,
                $storageAddressForFund->account_no,
                0,
                $storageAddressForFund->index_no
            );
            if (is_null($storageAddressForFund->nonce)) {
                //get nonce from web
                try {
                    $nonceResponse = file_get_contents("{$this->nonceUrl}{$storageAddressForFund->address}");
                    $nonceResponseConverted = json_decode($nonceResponse);
                    if (empty($nonceResponseConverted->result)) {
                        throw new \Exception("Incorrect response => {$nonceResponse}");
                    }
                    $nonce = hexdec($nonceResponseConverted->result);
                    $storageAddressForFund->nonce = $nonce;
                    array_push($transactionRequests, [
                        'to_address' => $fundAddress->address,
                        'amount' => floor($tradeCommisionValue)." mwei",
                        'chain_id' => $this->chainId,
                        'bip_path' => $bipPath,//from,
                        'nonce' => $nonce,
                        'gas_limit' => '21000',
                        'gas_price' => '21000',
                    ]);
                } catch (\Exception $e) {
                    $log[] = "error while fetching nonce for {$storageAddressForFund->address}: {$e->message}, the nonce response: ".($nonceResponse ?? 'wrong response');
                    $this->broadcastError("CRON_TRANSFER_COIN", $log[count($log)]);
                }
            } else {
                $nonce++;
                $storageAddressForFund->nonce++;
                array_push($transactionRequests, [
                    'to_address' => $fundAddress->address,
                    'amount' => floor($tradeCommisionValue)." mwei",
                    'chain_id' => $this->chainId,
                    'bip_path' => $bipPath,//from,
                    'nonce' => $nonce,
                    'gas_limit' => '21000',
                    'gas_price' => '21000',
                ]);
            }
        }

        foreach ($withdrawalRequests as $key => $withdrawalRequest) {
            //selecting the input storage
            $selectedStorageAddress = null;
            foreach($inputStorageAddresses as $inKey => $inputStorageAddress) {
                if($inputStorageAddress->amount > ($withdrawalRequest->transfer_amount + $txFee)) {
                    $selectedStorageAddress = $inputStorageAddress;
                    $inputStorageAddress->amount -= ($withdrawalRequest->transfer_amount + $txFee);
                    break;
                }
            }
            if ($selectedStorageAddress == null) {
                //to-do:less storage logic
                continue;
            }

            $bipPath = sprintf(
                config('app.bip_path_template'),
                $coin->detail->bip_path_start,
                $selectedStorageAddress->account_no,
                0,
                $selectedStorageAddress->index_no
            );
            if (is_null($selectedStorageAddress->nonce)) {
                //get nonce from web
                try {
                    $nonceResponse = file_get_contents("{$this->nonceUrl}{$selectedStorageAddress->address}");
                    $nonceResponseConverted = json_decode($nonceResponse);
                    if (empty($nonceResponseConverted->result)) {
                        throw new \Exception("Incorrect response => {$nonceResponse}");
                    }
                    $nonce = hexdec($nonceResponseConverted->result);
                    $selectedStorageAddress->nonce = $nonce;
                } catch (\Exception $e) {
                    $log[] = "error while fetching nonce for {$selectedStorageAddress->address}: {$e->message}, the nonce response: ".($nonceResponse ?? 'wrong response');
                    $this->broadcastError("CRON_TRANSFER_COIN", $log[count($log)]);
                    continue;
                }
            } else {
                $nonce++;
                $selectedStorageAddress->nonce++;
            }
            
            $amount = floor($this->convertEther($withdrawalRequest->transfer_amount, 'mwei'))." mwei";
            array_push($transactionRequests, [
                'withdrawal_id' => $withdrawalRequest->id,
                'to_address' => $withdrawalRequest->address,
                'amount' => $amount,
                'chain_id' => $this->chainId,
                'bip_path' => $bipPath,//from,
                'nonce' => $nonce,
                'gas_limit' => '21000',
                'gas_price' => '21000',
            ]);
            $log[] = "storage address #{$selectedStorageAddress->id}:{$selectedStorageAddress->address} bip_path {$bipPath} to withdrawal request  #{$withdrawalRequest->id} with address {$withdrawalRequest->address} amount {$amount}";
        }

        $transData = [
            'transaction_requests' => $transactionRequests,
        ];
        // dd($coin->detail->broadcast_tx_url, $coin->detail->broadcast_tx_key);
        // $transData = $transactionRequests[0];
        // dd($transData, $log);

        $log[] = "o/p data " . json_encode($transData);
        // dd($transData);
        // // dd(json_encode($transData));

        //nodeRequest
        // dump($transData);
        $nodeResponse = makeNodeRequest($transData, '/api/sign_eth_txs');
        // dd($nodeResponse);
        if ($nodeResponse['status'] == false) {
            $log[] = $nodeResponse['message'];
            return $log;
        }
        // dd($nodeResponse['data']);
        if (count($nodeResponse['data']) != count($transactionRequests)) {
            $log[] = 'ETH transactionRequests count and response count is not the same, transactionRequests: '.json_encode($transactionRequests).', response data: '.json_encode($nodeResponse['data']);
            $this->broadcastError("CRON_TRANSFER_COIN", $log[count($log)]);
            return $log;
        }
        $http = new Client();
        foreach ($nodeResponse['data'] as $key => $txHash) {
            // broadcast
            if ($txHash->success == false) {
                $log[] = 'Success false while signing '.json_encode($transData[$key]).' with message: '.$txHash->message;
                continue;
            }
            // dump($txHash->tx_hash, [
            //     $coin->detail->broadcast_tx_key => $txHash->tx_hash,
            // ]);
            try {
                $brResponse = $http->request('POST', $coin->detail->broadcast_tx_url, [
                    'form_params' => [
                        $coin->detail->broadcast_tx_key => $txHash->tx_hash,
                    ],
                ]);
                // dump($brResponse);
                $brResponseString = (string) $brResponse->getBody();
                $brResponseStringDecoded = json_decode($brResponseString);
                // dump($brResponseStringDecoded);
                if (empty($brResponseStringDecoded->result)) {
                    throw new \Exception('Wrong response for '.json_encode($transactionRequests[$key]).' with message: '.$brResponseString);
                }
                $txId = $brResponseStringDecoded->result;
                // dump($txId);
                $log[] = "txId: {$txId} for ".json_encode($transactionRequests[$key])." with signed tx {$txHash->tx_hash}";
            } catch (\Exception $e) {
                $log[] = "broadcast Error: {$e->getMessage()}";
                $this->broadcastError("CRON_TRANSFER_COIN", $log[count($log)]);
                continue;
                // return $log;
            }

            if ($selectedStorageAddress->mode != StorageAddress::CAN_USE) {
                //subscribing to node
                try {
                    $subResponse = $http->post(config('app.subscriber_endpoint') . "/subscribe-address", [
                        'form_params' => [
                            'address' => $selectedStorageAddress->address,
                            'coin' => $coin->symbol,
                            'type' => 'storage',
                            'key' => config('app.connector_key'),
                        ],
                    ]);
    
                    if ($subResponse->getStatusCode() != 200
                        || json_decode($subResponse->getBody())->status == false) {
                        $log[] = "Error while subscribing to address, error {$subResponse->getBody()}";
                        // dd($log);
                        // return $log;
                    }
                } catch (\Exception $e) {
                    $log[] = "subscriber node Error while subscribing storage address: {$e->getMessage()}";
                    $this->broadcastError("CRON_TRANSFER_COIN", $log[count($log)]);
                    // return $log;
                }
                
                $selectedStorageAddress->mode = StorageAddress::CAN_USE;
            }
            
            //unsetting nonce to prevent update error
            unset($selectedStorageAddress->nonce);
            $selectedStorageAddress->save();
            $selectedStorageAddress->nonce = $nonce;

            if (false == array_key_exists('withdrawal_id', $transactionRequests[$key])) {
                //thus it's a fund address
                if (true == $isFundIncluded) {
                    $log[] = "fund included";
                    //subscribing to node
                    if ($fundAddress->mode != FundAddress::CAN_USE) {
                        try {
                            $subResponse = $http->post(config('app.subscriber_endpoint') . "/subscribe-address", [
                                'form_params' => [
                                    'address' => $fundAddress->address,
                                    'coin' => $coin->symbol,
                                    'type' => 'fund',
                                    'key' => config('app.connector_key'),
                                ],
                            ]);
            
                            if ($subResponse->getStatusCode() != 200
                                || json_decode($subResponse->getBody())->status == false) {
                                $log[] = "Error while subscribing to address, error {$subResponse->getBody()}";
                                // dd($log);
                                // return $log;
                            }
                            $fundAddress->mode = FundAddress::CAN_USE;
                            $fundAddress->save();
                        } catch (\Exception $e) {
                            $log[] = "subscriber node Error while subscribing fund address{$e->getMessage()}";
                            $this->broadcastError("CRON_TRANSFER_COIN", $log[count($log)]);
                            // return $log;
                        }
                        
                    }
                    Trade::updateToCommissionTransferred($commissionTrades->pluck('id'));
                }
            } else {
                //common withdrawal request
                $withdrawal = $withdrawalRequests->keyBy('id')[$transactionRequests[$key]['withdrawal_id']];

                $transactionId = Transaction::createTransaction([
                    'user_id' => $withdrawal->user_id,
                    'coin_id' => $withdrawal->coin_id,
                    'amount' => -$withdrawal->amount,
                    'public_address_id' => null,
                    'tx_id' => $txId,
                    'v_out' => null,
                    'trade_id' => null,
                    'type' => Transaction::WITHDRAWAL,
                    'fees' => $withdrawal->fee,
                    'is_transacted' => 1,
                    'is_stored' => 0,
                    'status' => Transaction::ACTIVE,
                ]);

                TransactionLog::createLog([
                    'user_id' => $withdrawal->user_id,
                    'transaction_id' => $transactionId,
                    'description' => "{$withdrawal->amount} {$coin->symbol} is withdrawed for " . User::find($withdrawal->user_id)->username . " by tx {$txId}",
                    'created_at' => now(),
                    'status' => TransactionLog::ACTIVE,
                ]);

                $balance = Transaction::getBalance($withdrawal->coin_id, $withdrawal->user_id);
                UserCoin::updateBalance($withdrawal->coin_id, $withdrawal->user_id, $balance);

                broadcast(new BalanceUpdate($withdrawal->user_id, $coin->symbol, $balance));
                WithdrawalRequest::updateToProccessed([$transactionRequests[$key]['withdrawal_id']]);
            }
            
            //send next request after some time
            sleep(2);
        }

        return $log;
    }

    public function calculateGasFee($convertion)
    {
        //default tax fee
        return $this->convertEther(0.0000021, $convertion);
    }

    public function convertEther($amount, $convertion)
    {
        switch ($convertion) {
            case 'wei':
                return $amount * pow(10, 18);
                break;
            case 'kwei':
                return $amount * pow(10, 15);
                break;
            case 'mwei':
                return $amount * pow(10, 12);
                break;
            case 'gwei':
                return $amount * pow(10, 9);
                break;
            case 'microwei':
                return $amount * pow(10, 6);
                break;
            case 'ether':
                return $amount;
                break;
            default:
                return $amount;
                break;
        }
    }

    public function broadcastError($errorType, $message)
    {
        $error = array(
            'type' => config("logging.error_type.{$errorType}"),
            'message' => $message,
            'date' => date('Y-m-d'),
        );
        $objError = json_encode($error);
        broadcast(new ErrorBroadcasting($objError));
    }
}

