<?php

namespace App\Models;

use App\Models\Model;

class AuthorizationChallenge extends Model
{
    //challenge_status
    const PASSED = 1;
    const PENDING = 2;
    const TIMED_OUT = 3;

    //status
    const DELETED=0;
    const ACTIVE = 1;
    const INACTIVE = 2;

    //complexity
    const PASSWORD_RESET_COMPLEXITY = 2;
    const LOGIN_COMPLEXITY = 3;
    const FORGET_PASSWORD_COMPLEXITY = 4;
    const WITHDRAWAL_COMPLEXITY = 5;

    public $dates = [
        'valid_till'
    ];

    /*Create Queries Start*/
    public static function createChallenge($data)
    {
        $challenge = new self;

        $challenge->user_id = $data['user_id'];
        $challenge->numbers = $data['numbers'];
        $challenge->complexity = $data['complexity'];
        $challenge->challenge_status = $data['challenge_status'];
        $challenge->retry_count = $data['retry_count'];
        $challenge->valid_till = $data['valid_till'];
        $challenge->status = $data['status'];

        return $challenge->save();
    }
    /*Create Queries End*/

    /*Find Queries Start*/

    public static function findByUserIdByComplexity($userId, $complexity)
    {
        return self::where('user_id', $userId)
            ->where('complexity', $complexity)
            ->active()
            ->latest()
            ->first();
    }

    public static function findValidPassedByUserIdByComplexity($userId, $complexity)
    {
        return self::where('user_id', $userId)
            ->where('complexity', $complexity)
            ->where('challenge_status', self::PASSED)
            ->where('valid_till', '>', now())
            ->active()
            ->latest()
            ->first();
    }

    /*Find Queries End*/

    /*Get Queries Start*/

    public function getNumbersAttribute($numbers)
    {
        return json_decode($numbers);
    }

    /*Get Queries End*/
}

